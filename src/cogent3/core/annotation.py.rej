***************
*** 1,6 ****
  import copy
- import abc 
  import json
  
  from collections import defaultdict
  from fnmatch import fnmatch
--- 1,6 ----
  import copy
  import json
+ import abc
  
  from collections import defaultdict
  from fnmatch import fnmatch
***************
*** 16,22 ****
  __copyright__ = "Copyright 2007-2022, The Cogent Project"
  __credits__ = ["Peter Maxwell", "Gavin Huttley"]
  __license__ = "BSD-3"
- __version__ = "2022.4.20a1"
  __maintainer__ = "Gavin Huttley"
  __email__ = "gavin.huttley@anu.edu.au"
  __status__ = "Production"
--- 16,22 ----
  __copyright__ = "Copyright 2007-2022, The Cogent Project"
  __credits__ = ["Peter Maxwell", "Gavin Huttley"]
  __license__ = "BSD-3"
+ __version__ = "2022.8.24a1"
  __maintainer__ = "Gavin Huttley"
  __email__ = "gavin.huttley@anu.edu.au"
  __status__ = "Production"
***************
*** 509,515 ****
      map = Map([(0, len(data))], parent_length=len(parent))
      return _SimpleVariable(parent, map, type=type, name=name, data=data)
  
- 
  class AnnotationDbBase(abc.ABC):
  
      @abc.abstractmethod
--- 509,514 ----
      map = Map([(0, len(data))], parent_length=len(parent))
      return _SimpleVariable(parent, map, type=type, name=name, data=data)
  
  class AnnotationDbBase(abc.ABC):
  
      @abc.abstractmethod
***************
*** 604,630 ****
          
          return list(rowdict.values())
  
- 
- def _make_genbank_db():
-     ...
- 
- class GenbankAnnotationDb(AnnotationDbBase):
- 
-     def __init__(self, path=None):
-         self.db = _make_genbank_db()
-         if path:
-             self.populate_from_file(path)
-         ...
-     
-     def populate_from_file(self, path):
-         ...
- 
-     def make_sql_query(self):
-         ...
- 
-     def find_records(self,name=None,bio_type=None,idenitifer=None,start=None,end=None):
-         ...
-         #return a list of dictionaries 
-         #[dict(type="", name="", spans=[]), ...]
-         # Feature(self, **d)
- 
--- 603,605 ----
          
          return list(rowdict.values())
  
